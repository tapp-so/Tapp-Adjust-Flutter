// lib/com_tapp_so_adjust.dart

import 'dart:async';
import 'dart:io' show Platform;
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';

import 'src/models.dart';
export 'src/models.dart';

import 'com_tapp_so_adjust_platform_interface.dart';

T _unsupported<T>(String method) {
  debugPrint(
      '[${Platform.operatingSystem}] Method "$method" is not supported. COM_TAPP_SO_ADJUST');
  return null as T;
}

class ComTappSoAdjust {
  // New channel names for this package
  static const MethodChannel _method =
      MethodChannel('com.tapp.so.adjust/methods');
  static const EventChannel _events = EventChannel('com.tapp.so.adjust/events');

  ComTappSoAdjust() {
    debugPrint('[ComTappSoAdjust] instance created');
  }

  // ——— Core SDK ———

  /// Initialize the native SDK.
  Future<void> start({
    required String authToken,
    required EnvironmentType env,
    required String tappToken,
  }) async {
    debugPrint(
        '[ComTappSoAdjust.start] authToken=$authToken, env=${env.name}, tappToken=$tappToken');
    if (!Platform.isAndroid && !Platform.isIOS) {
      return _unsupported('initialize');
    }
    await _method.invokeMethod('initialize', {
      'authToken': authToken,
      'environment': env.name,
      'tappToken': tappToken,
    });
    debugPrint('[ComTappSoAdjust.start] initialization complete');
  }

  /// Returns e.g. "iOS 17.4.1" or "Android 14".
  Future<String?> getPlatformVersion() {
    debugPrint('[ComTappSoAdjust.getPlatformVersion]');
    return ComTappSoAdjustPlatform.instance.getPlatformVersion();
  }

  /// Whether the given URL should be handed off to `handleLink` etc.
  Future<bool> shouldProcess(String deepLink) async {
    debugPrint('[ComTappSoAdjust.shouldProcess] deepLink=$deepLink');
    if (!Platform.isAndroid && !Platform.isIOS) {
      return _unsupported('shouldProcess');
    }
    final ok = await _method.invokeMethod<bool>(
      'shouldProcess',
      {'deepLink': deepLink},
    );
    debugPrint('[ComTappSoAdjust.shouldProcess] result=$ok');
    return ok ?? false;
  }

  /// Generate a tapp URL.
  Future<String?> generateUrl({
    required String influencer,
    String? adGroup,
    String? creative,
    Map<String, String>? data,
  }) async {
    debugPrint(
        '[ComTappSoAdjust.generateUrl] influencer=$influencer, adGroup=$adGroup, creative=$creative, data=$data');
    if (!Platform.isAndroid && !Platform.isIOS) {
      return _unsupported('generateUrl');
    }
    final url = await _method.invokeMethod<String>(
      'generateUrl',
      {
        'influencer': influencer,
        'adGroup': adGroup,
        'creative': creative,
        'data': data,
      },
    );
    debugPrint('[ComTappSoAdjust.generateUrl] returned url=$url');
    return url;
  }

  /// Fire a simple event token.
  Future<void> handleEvent(String eventToken) async {
    debugPrint('[ComTappSoAdjust.handleEvent] eventToken=$eventToken');
    if (!Platform.isAndroid && !Platform.isIOS) {
      return _unsupported('handleEvent');
    }
    await _method.invokeMethod('handleEvent', {'eventToken': eventToken});
    debugPrint('[ComTappSoAdjust.handleEvent] complete');
  }

  /// Fire a tapp-event with an enum or custom string.
  Future<void> handleTappEvent({
    required EventAction eventAction,
    String? customValue,
  }) async {
    final actionName = eventAction == EventAction.custom
        ? (customValue ?? 'custom_event_autogenerated')
        : eventAction.name.toLowerCase();
    debugPrint('[ComTappSoAdjust.handleTappEvent] actionName=$actionName');
    if (!Platform.isAndroid && !Platform.isIOS) {
      return _unsupported('handleTappEvent');
    }
    await _method.invokeMethod('handleTappEvent', {
      'eventAction': actionName,
    });
    debugPrint('[ComTappSoAdjust.handleTappEvent] complete');
  }

  /// Fetch deep-link data.
  Future<LinkData?> fetchLinkData(String deepLink) async {
    debugPrint('[ComTappSoAdjust.fetchLinkData] deepLink=$deepLink');
    if (!Platform.isAndroid && !Platform.isIOS) {
      return _unsupported('fetchLinkData');
    }
    final raw = await _method.invokeMethod<dynamic>(
      'fetchLinkData',
      {'deepLink': deepLink},
    );
    debugPrint('[ComTappSoAdjust.fetchLinkData] raw=$raw');
    if (raw == null) return null;
    final data = LinkData.fromMap(Map<String, dynamic>.from(raw));
    debugPrint('[ComTappSoAdjust.fetchLinkData] parsed=$data');
    return data;
  }

  /// Fetch the original install deep-link.
  Future<LinkData?> fetchOriginLinkData() async {
    debugPrint('[ComTappSoAdjust.fetchOriginLinkData]');
    if (!Platform.isAndroid && !Platform.isIOS) {
      return _unsupported('fetchOriginLinkData');
    }
    final raw = await _method.invokeMethod<dynamic>('fetchOriginLinkData');
    debugPrint('[ComTappSoAdjust.fetchOriginLinkData] raw=$raw');
    if (raw == null) return null;
    final data = LinkData.fromMap(Map<String, dynamic>.from(raw));
    debugPrint('[ComTappSoAdjust.fetchOriginLinkData] parsed=$data');
    return data;
  }

  /// Get Tapp config (iOS may return not supported).
  Future<Config?> getConfig() async {
    debugPrint('[ComTappSoAdjust.getConfig]');
    final raw = await _method.invokeMethod<dynamic>('getConfig');
    debugPrint('[ComTappSoAdjust.getConfig] raw=$raw');
    if (raw == null) return null;
    final map = Map<String, dynamic>.from(raw);
    debugPrint('[ComTappSoAdjust.getConfig] map=$map');
    final cfg = Config.fromMap(map);
    debugPrint('[ComTappSoAdjust.getConfig] parsed=$cfg');
    return cfg;
  }

  Future<void> simulateTestEvent() async {
    if (!Platform.isAndroid) {
      return _unsupported('simulateTestEvent');
    }
    await _method.invokeMethod('simulateTestEvent');
  }

  // ——— Deferred-link events ———

  // Shared broadcast stream from the EventChannel:
  static final Stream<Map<String, dynamic>> _broadcast =
      _events.receiveBroadcastStream().cast<Map<dynamic, dynamic>>().map((raw) {
    final m = Map<String, dynamic>.from(raw);
    debugPrint('[ComTappSoAdjust._rawEvents] raw event: $m');
    return m;
  }).asBroadcastStream();

  /// Internally, always use the same broadcast:
  Stream<Map<String, dynamic>> get _rawEvents => _broadcast;

  /// Fires when a deferred deep link arrives.
  Stream<DeferredDeepLinkData> get onDeferredDeepLink =>
      _rawEvents.where((m) => m['type'] == 'onDeferredLinkReceived').map((m) {
        debugPrint('[ComTappSoAdjust.onDeferredDeepLink] payload: $m');
        return DeferredDeepLinkData.fromMap(m);
      });

  /// Fires when resolving the deferred link fails.
  Stream<FailResolveData> get onFailResolvingUrl =>
      _rawEvents.where((m) => m['type'] == 'onDidFailResolvingURL').map((m) {
        debugPrint('[ComTappSoAdjust.onFailResolvingUrl] payload: $m');
        return FailResolveData.fromMap(m);
      });

  /// Example test listener
  Stream<String?> get onTestListener => _rawEvents
      .where((m) => m['type'] == 'onTestListener')
      .map((m) => m['test'] as String?);

  // ——— Adjust integration ———
  // (Remain on MethodChannel until you add them to the PlatformInterface)

  Future<void> adjustEnable() async {
    debugPrint('[ComTappSoAdjust.adjustEnable]');
    if (Platform.isIOS) return _unsupported('adjustEnable');
    await _method.invokeMethod('adjustEnable');
    debugPrint('[ComTappSoAdjust.adjustEnable] done');
  }

  Future<void> adjustDisable() async {
    debugPrint('[ComTappSoAdjust.adjustDisable]');
    if (Platform.isIOS) return _unsupported('adjustDisable');
    await _method.invokeMethod('adjustDisable');
    debugPrint('[ComTappSoAdjust.adjustDisable] done');
  }

  Future<bool> adjustIsEnabled() async {
    debugPrint('[ComTappSoAdjust.adjustIsEnabled]');
    if (Platform.isIOS) return _unsupported('adjustIsEnabled');
    final enabled = await _method.invokeMethod<bool>('adjustIsEnabled');
    debugPrint('[ComTappSoAdjust.adjustIsEnabled] result=$enabled');
    return enabled ?? false;
  }

  Future<void> adjustGdprForgetMe() async {
    debugPrint('[ComTappSoAdjust.adjustGdprForgetMe]');
    if (Platform.isIOS) return _unsupported('adjustGdprForgetMe');
    await _method.invokeMethod('adjustGdprForgetMe');
    debugPrint('[ComTappSoAdjust.adjustGdprForgetMe] done');
  }

  Future<String?> adjustGetAdid() async {
    debugPrint('[ComTappSoAdjust.adjustGetAdid]');
    if (!Platform.isAndroid) return _unsupported('adjustGetAdid');
    final id = await _method.invokeMethod<String>('adjustGetAdid');
    debugPrint('[ComTappSoAdjust.adjustGetAdid] result=$id');
    return id;
  }

  Future<String?> adjustGetIdfa() async {
    debugPrint('[ComTappSoAdjust.adjustGetIdfa]');
    if (!Platform.isIOS) return _unsupported('adjustGetIdfa');
    final id = await _method.invokeMethod<String>('adjustGetIdfa');
    debugPrint('[ComTappSoAdjust.adjustGetIdfa] result=$id');
    return id;
  }

  Future<String?> adjustGetGoogleAdId() async {
    debugPrint('[ComTappSoAdjust.adjustGetGoogleAdId]');
    if (!Platform.isAndroid) return _unsupported('adjustGetGoogleAdId');
    final id = await _method.invokeMethod<String>('adjustGetGoogleAdId');
    debugPrint('[ComTappSoAdjust.adjustGetGoogleAdId] result=$id');
    return id;
  }

  Future<String?> adjustGetAmazonAdId() async {
    debugPrint('[ComTappSoAdjust.adjustGetAmazonAdId]');
    if (!Platform.isAndroid) return _unsupported('adjustGetAmazonAdId');
    final id = await _method.invokeMethod<String>('adjustGetAmazonAdId');
    debugPrint('[ComTappSoAdjust.adjustGetAmazonAdId] result=$id');
    return id;
  }

  Future<String?> adjustGetSdkVersion() async {
    debugPrint('[ComTappSoAdjust.adjustGetSdkVersion]');
    if (!Platform.isAndroid) return _unsupported('adjustGetSdkVersion');
    final v = await _method.invokeMethod<String>('adjustGetSdkVersion');
    debugPrint('[ComTappSoAdjust.adjustGetSdkVersion] result=$v');
    return v;
  }

  Future<String?> adjustGetGooglePlayInstallReferrer() async {
    debugPrint('[ComTappSoAdjust.adjustGetGooglePlayInstallReferrer]');
    if (!Platform.isAndroid)
      return _unsupported('adjustGetGooglePlayInstallReferrer');
    final r = await _method
        .invokeMethod<String>('adjustGetGooglePlayInstallReferrer');
    debugPrint(
        '[ComTappSoAdjust.adjustGetGooglePlayInstallReferrer] result=$r');
    return r;
  }

  Future<void> adjustSetPushToken(String token) async {
    debugPrint('[ComTappSoAdjust.adjustSetPushToken] token=$token');
    if (!Platform.isAndroid) return _unsupported('adjustSetPushToken');
    await _method.invokeMethod('adjustSetPushToken', {'token': token});
    debugPrint('[ComTappSoAdjust.adjustSetPushToken] done');
  }

  Future<void> adjustSetReferrer(String referrer) async {
    debugPrint('[ComTappSoAdjust.adjustSetReferrer] referrer=$referrer');
    if (!Platform.isAndroid) return _unsupported('adjustSetReferrer');
    await _method.invokeMethod('adjustSetReferrer', {'referrer': referrer});
    debugPrint('[ComTappSoAdjust.adjustSetReferrer] done');
  }

  Future<void> adjustOnResume() async {
    debugPrint('[ComTappSoAdjust.adjustOnResume]');
    if (!Platform.isAndroid) return _unsupported('adjustOnResume');
    await _method.invokeMethod('adjustOnResume');
    debugPrint('[ComTappSoAdjust.adjustOnResume] done');
  }

  Future<void> adjustOnPause() async {
    debugPrint('[ComTappSoAdjust.adjustOnPause]');
    if (!Platform.isAndroid) return _unsupported('adjustOnPause');
    await _method.invokeMethod('adjustOnPause');
    debugPrint('[ComTappSoAdjust.adjustOnPause] done');
  }

  Future<void> adjustTrackAdRevenue(AdjustTrackAdRevenueType config) async {
    debugPrint(
        '[ComTappSoAdjust.adjustTrackAdRevenue] source=${config.source}, revenue=${config.revenue}, currency=${config.currency}');
    if (!Platform.isAndroid) return _unsupported('adjustTrackAdRevenue');
    await _method.invokeMethod('adjustTrackAdRevenue', {
      'source': config.source,
      'revenue': config.revenue,
      'currency': config.currency,
    });
    debugPrint('[ComTappSoAdjust.adjustTrackAdRevenue] done');
  }

  Future<void> adjustTrackThirdPartySharing(bool enabled) async {
    debugPrint(
        '[ComTappSoAdjust.adjustTrackThirdPartySharing] enabled=$enabled');
    if (!Platform.isAndroid)
      return _unsupported('adjustTrackThirdPartySharing');
    await _method
        .invokeMethod('adjustTrackThirdPartySharing', {'enabled': enabled});
    debugPrint('[ComTappSoAdjust.adjustTrackThirdPartySharing] done');
  }

  Future<void> adjustTrackMeasurementConsent(bool consent) async {
    debugPrint(
        '[ComTappSoAdjust.adjustTrackMeasurementConsent] consent=$consent');
    if (!Platform.isAndroid)
      return _unsupported('adjustTrackMeasurementConsent');
    await _method
        .invokeMethod('adjustTrackMeasurementConsent', {'consent': consent});
    debugPrint('[ComTappSoAdjust.adjustTrackMeasurementConsent] done');
  }

  Future<void> adjustAddGlobalCallbackParameter(
      String key, String value) async {
    debugPrint(
        '[ComTappSoAdjust.adjustAddGlobalCallbackParameter] key=$key value=$value');
    if (!Platform.isAndroid)
      return _unsupported('adjustAddGlobalCallbackParameter');
    await _method.invokeMethod(
        'adjustAddGlobalCallbackParameter', {'key': key, 'value': value});
    debugPrint('[ComTappSoAdjust.adjustAddGlobalCallbackParameter] done');
  }

  Future<void> adjustAddGlobalPartnerParameter(String key, String value) async {
    debugPrint(
        '[ComTappSoAdjust.adjustAddGlobalPartnerParameter] key=$key value=$value');
    if (!Platform.isAndroid)
      return _unsupported('adjustAddGlobalPartnerParameter');
    await _method.invokeMethod(
        'adjustAddGlobalPartnerParameter', {'key': key, 'value': value});
    debugPrint('[ComTappSoAdjust.adjustAddGlobalPartnerParameter] done');
  }

  Future<void> adjustRemoveGlobalCallbackParameter(String key) async {
    debugPrint(
        '[ComTappSoAdjust.adjustRemoveGlobalCallbackParameter] key=$key');
    if (!Platform.isAndroid)
      return _unsupported('adjustRemoveGlobalCallbackParameter');
    await _method
        .invokeMethod('adjustRemoveGlobalCallbackParameter', {'key': key});
    debugPrint('[ComTappSoAdjust.adjustRemoveGlobalCallbackParameter] done');
  }

  Future<void> adjustRemoveGlobalPartnerParameter(String key) async {
    debugPrint('[ComTappSoAdjust.adjustRemoveGlobalPartnerParameter] key=$key');
    if (!Platform.isAndroid)
      return _unsupported('adjustRemoveGlobalPartnerParameter');
    await _method
        .invokeMethod('adjustRemoveGlobalPartnerParameter', {'key': key});
    debugPrint('[ComTappSoAdjust.adjustRemoveGlobalPartnerParameter] done');
  }

  Future<void> adjustRemoveGlobalCallbackParameters() async {
    debugPrint('[ComTappSoAdjust.adjustRemoveGlobalCallbackParameters]');
    if (!Platform.isAndroid)
      return _unsupported('adjustRemoveGlobalCallbackParameters');
    await _method.invokeMethod('adjustRemoveGlobalCallbackParameters');
    debugPrint('[ComTappSoAdjust.adjustRemoveGlobalCallbackParameters] done');
  }

  Future<void> adjustRemoveGlobalPartnerParameters() async {
    debugPrint('[ComTappSoAdjust.adjustRemoveGlobalPartnerParameters]');
    if (!Platform.isAndroid)
      return _unsupported('adjustRemoveGlobalPartnerParameters');
    await _method.invokeMethod('adjustRemoveGlobalPartnerParameters');
    debugPrint('[ComTappSoAdjust.adjustRemoveGlobalPartnerParameters] done');
  }

  Future<VerifyResult?> adjustVerifyAppStorePurchase({
    required String transactionId,
    required String productId,
  }) async {
    debugPrint(
        '[ComTappSoAdjust.adjustVerifyAppStorePurchase] transactionId=$transactionId productId=$productId');
    if (!Platform.isIOS) return _unsupported('adjustVerifyAppStorePurchase');
    final raw = await _method.invokeMethod<dynamic>(
      'adjustVerifyAppStorePurchase',
      {'transactionId': transactionId, 'productId': productId},
    );
    debugPrint('[ComTappSoAdjust.adjustVerifyAppStorePurchase] raw=$raw');
    if (raw == null) return null;
    final m = Map<String, dynamic>.from(raw);
    final result = VerifyResult(
      verificationStatus: m['verificationStatus'] as String,
      code: m['code'] as int,
      message: m['message'] as String,
    );
    debugPrint('[ComTappSoAdjust.adjustVerifyAppStorePurchase] parsed=$result');
    return result;
  }

  Future<VerifyResult?> adjustVerifyAndTrackPlayStorePurchase({
    required String eventToken,
  }) async {
    debugPrint(
        '[ComTappSoAdjust.adjustVerifyAndTrackPlayStorePurchase] eventToken=$eventToken');
    if (!Platform.isAndroid) {
      return _unsupported('adjustVerifyAndTrackPlayStorePurchase');
    }
    final raw = await _method.invokeMethod<dynamic>(
      'adjustVerifyPlayStorePurchase',
      {'eventToken': eventToken},
    );
    debugPrint(
        '[ComTappSoAdjust.adjustVerifyAndTrackPlayStorePurchase] raw=$raw');
    if (raw == null) return null;
    final m = Map<String, dynamic>.from(raw);
    final result = VerifyResult(
      verificationStatus: m['verificationStatus'] as String,
      code: m['code'] as int,
      message: m['message'] as String,
    );
    debugPrint(
        '[ComTappSoAdjust.adjustVerifyAndTrackPlayStorePurchase] parsed=$result');
    return result;
  }

  Future<void> adjustTrackPlayStoreSubscription(
      PlayStoreSubscription subscription) async {
    debugPrint(
        '[ComTappSoAdjust.adjustTrackPlayStoreSubscription] subscription=$subscription');
    if (!Platform.isAndroid)
      return _unsupported('adjustTrackPlayStoreSubscription');
    await _method.invokeMethod('adjustTrackPlayStoreSubscription', {
      'subscription': {
        'price': subscription.price,
        'currency': subscription.currency,
        'sku': subscription.sku,
        'orderId': subscription.orderId,
        'signature': subscription.signature,
        'purchaseToken': subscription.purchaseToken,
        'purchaseTime': subscription.purchaseTime,
      }
    });
    debugPrint('[ComTappSoAdjust.adjustTrackPlayStoreSubscription] done');
  }

  Future<void> adjustTrackAppStoreSubscription(
      AppStoreSubscription subscription) async {
    debugPrint(
        '[ComTappSoAdjust.adjustTrackAppStoreSubscription] subscription=$subscription');
    if (!Platform.isIOS) return _unsupported('adjustTrackAppStoreSubscription');
    await _method.invokeMethod('adjustTrackAppStoreSubscription', {
      'subscription': {
        'price': subscription.price,
        'currency': subscription.currency,
        'transactionId': subscription.transactionId,
      }
    });
    debugPrint('[ComTappSoAdjust.adjustTrackAppStoreSubscription] done');
  }

  Future<String?> adjustConvert(String universalLink, String scheme) async {
    debugPrint(
        '[ComTappSoAdjust.adjustConvert] universalLink=$universalLink scheme=$scheme');
    if (!Platform.isIOS) return _unsupported('adjustConvert');
    final converted = await _method.invokeMethod<String>('adjustConvert', {
      'universalLink': universalLink,
      'scheme': scheme,
    });
    debugPrint('[ComTappSoAdjust.adjustConvert] result=$converted');
    return converted;
  }

  Future<int?> adjustRequestAppTrackingAuthorization() async {
    debugPrint('[ComTappSoAdjust.adjustRequestAppTrackingAuthorization]');
    if (!Platform.isIOS)
      return _unsupported('adjustRequestAppTrackingAuthorization');
    final status = await _method
        .invokeMethod<int>('adjustRequestAppTrackingAuthorization');
    debugPrint(
        '[ComTappSoAdjust.adjustRequestAppTrackingAuthorization] status=$status');
    return status;
  }

  Future<int?> adjustAppTrackingAuthorizationStatus() async {
    debugPrint('[ComTappSoAdjust.adjustAppTrackingAuthorizationStatus]');
    if (!Platform.isIOS)
      return _unsupported('adjustAppTrackingAuthorizationStatus');
    final status =
        await _method.invokeMethod<int>('adjustAppTrackingAuthorizationStatus');
    debugPrint(
        '[ComTappSoAdjust.adjustAppTrackingAuthorizationStatus] status=$status');
    return status;
  }

  Future<void> adjustUpdateSkanConversionValue(
      UpdateSkanConversionValueType params) async {
    debugPrint(
        '[ComTappSoAdjust.adjustUpdateSkanConversionValue] params=$params');
    if (!Platform.isIOS) return _unsupported('adjustUpdateSkanConversionValue');
    await _method.invokeMethod('adjustUpdateSkanConversionValue', {
      'params': {
        'value': params.value,
        'coarseValue': params.coarseValue,
        'lockWindow': params.lockWindow,
      }
    });
    debugPrint('[ComTappSoAdjust.adjustUpdateSkanConversionValue] done');
  }
}
